
/*
 *  Programe: 457 - Linear Cellular Automata
 *  Coder: FRESH_Q
 *  Date: JUNE 1, 2014
 */

/*
 * Explaination of this question.
 * For each dish, it will move to left and right. 
 * So, day one, dish[i] = K1. day 2: dish[i] = dish[i-1] + dish[i] + dish[i+1] = K2 ==> DNA[K2]
 * Then use the DNA list to get the desity.. DNA[K] transform to 0--3.
 * The first line set the dish in #20 position.
 */

/*
 *  I tried to expand the dish density from middle to right and left.
 *  The above way failed as the left is not alway the same as right.
 *  Finally, I have to calculate the desity from left to right. GOT Accept.
 */

#include <stdio.h>
#include <string.h>

#define MAX_DISH 42   /* always leave 0 to the first dish and last dish */
                      /* only use 1 to 40 dish */
#define MIDDLE 20
int dish[MAX_DISH];
int DNA[10];
int main()
{
    int previous, temp;
    int totalCase = 0;
    int line = 50;
    scanf("%d", &totalCase);
    while (totalCase > 0)
    {
        memset(dish, 0, sizeof(dish));   /* initial the dish array !!*/
        dish[MIDDLE]=1;
        int i = 0, j;
        while (i < 10)
        {
            scanf("%d", &DNA[i]);
            i++;
        }
        
        printf("                   .                    \n");
        j = 1;
        while (j < line){
            previous = 0;
            for (i = 1; i < (MAX_DISH - 1); i++)
            {
                temp = dish[i];
                dish[i] = DNA[previous + dish[i] + dish[i+1]];
                previous = temp;
            }
            
            for (i = 1; i < MAX_DISH - 1; i++)
            {
                switch(dish[i])
                {
                    case 0:
                        printf(" ");
                        break;
                    case 1:
                        printf(".");
                        break;
                    case 2:
                        printf("x");
                        break;
                    case 3:
                        printf("W");
                        break;
                }
            }
            printf("\n");
            j++;
        }
        totalCase--;
        if (totalCase > 0) printf("\n");
    }
    return 0;
}

